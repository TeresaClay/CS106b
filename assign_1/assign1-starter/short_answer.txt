Before submitting this file, make sure that there are no more TODO
placeholders remaining in the file (and remove this comment too).

Perfect Numbers
---------------

Before submitting this file, make sure that there are no more TODO
placeholders remaining in the file (and remove this comment too).

Q1. Roughly how long did it take your computer to do the search? How many perfect numbers were found and what were they?
A1. It took 4 s. Four perfect numbers were found: 6, 28, 496, 8128 
    
 
Q2. Record the timing results for `findPerfects` that you observed into a table.
A2. 	
	Correct (STUDENT_TEST, perfect.cpp:126) Q2: One minute 
    	Line 127 TIME_OPERATION findPerfects(20000) (size =    20000) completed in    0.839 secs
    	Line 128 TIME_OPERATION findPerfects(40000) (size =    40000) completed in    3.220 secs
    	Line 129 TIME_OPERATION findPerfects(80000) (size =    80000) completed in    12.837 secs
    	Line 130 TIME_OPERATION findPerfects(160000) (size =   160000) completed in   51.119 secs



Q3. Does it take the same amount of work to compute `isPerfect` on the number 10 as it does on the number 1000? Why or why not? Does it take the same amount of work for `findPerfects` to search the range of numbers from 1-1000 as it does to search the numbers from 1000-2000? Why or why not?
A3. 	Searching up to 10:    6		with 0.007 secs
	Searching up to 1000:  6 28 496		with 0.015 secs
	Searching up to 2000:  6 28 496		with 0.026 secs
	
	Number 1000 requires more work to compute 'isPefect' than number 10.
	The range of numbers from 1-1000 requires more work for 'findPefects' than that from 1000 - 2000.
	
Q4. Extrapolate from the data you gathered and make a prediction: how long will it take `findPerfects` to reach the fifth perfect number?
A4. TODO

Q5. Do any of the tests still pass even with this broken function? Why or why not?
A5. negative value tests still pass. ( 无论 total为0或1，负数n都不等于total.)

Q6. Describe the testing strategy you used for your test cases to confirm `smarterSum` is working correctly.
A6. 
	

	Correct (STUDENT_TEST, perfect.cpp:175) Time trials of findPerfectsSmarter on doubling input sizes
    	Line 176 TIME_OPERATION findPerfectsSmarter(10000) (size =    20000) completed in    0.021 secs
    	Line 177 TIME_OPERATION findPerfectsSmarter(20000) (size =    40000) completed in    0.040 secs
    	Line 178 TIME_OPERATION findPerfectsSmarter(40000) (size =    80000) completed in    0.072 secs
    	Line 179 TIME_OPERATION findPerfectsSmarter(80000) (size =   160000) completed in    0.145 secs

Q7. Record your timing results for `findPerfectsSmarter` into a table.
A7. TODO

Q8. Make a prediction: how long will `findPerfectsSmarter` take to reach the fifth perfect number?
A8. TODO

Q9. Explain how you chose your specific test cases and why they lead you to be confident `findNthPerfectEuclid` is working correctly.
A9. TODO

Soundex
-------

Q10. What is the Soundex code for "Angelou"? What is the code for your own surname?
A10. TODO

Q11. Before writing any code, brainstorm your plan of attack and sketch how you might decompose the work into smaller tasks. Briefly describe your decomposition strategy.
A11. TODO

Q12. Think about one or more examples of a class of names that the Soundex system might not work well for. Explain what this class of names is and why the system might incorrectly group them or mis-categorize one of the names.
A12. TODO

Q13. Suppose you are a software engineer working for the U.S. government. You have been tasked with implementing a system that collects names as part of the Census survey and analyzes these names using a phonetic algorithm. Your boss suggests using Soundex and notes that the algorithm is only expected to work for ASCII-encoded strings, since supporting Unicode would require extra work and time. What would your response be and why? What representational harms might result from building a system that exclusively uses Soundex and/or ASCII?
A13. TODO


